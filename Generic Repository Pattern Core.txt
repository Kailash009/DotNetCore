Generic Repository Pattern:-
---------------------------------------------------
>> When we have multiple models like(Employee,Customer,Department,School)  and we are going to perform CRUD operations all these models, with help of Repository pattern we need to create different Interfaces and services Like (IEmployee,ICustomer,IDepartment,ISchool), it means to perform same operation we need to repeat same thing again and again. In programming we believe the concept of DRY(Don't Repeat Yourself). In this case Repository Pattern is not effecient, then we use the concept of Generic Repository Pattern.
----------------------------------------------------------------------------------------------------------------------------------------------------------
namespace GenericRepoNeetu.GenericRepository.Contract
{
    public interface IGeneric<T> where T:class
    {
        List<T> GetAll();
        bool Add(T obj);
        T Get(int id);
        bool Update(T obj);
        bool Delete(int id);
    }
}
-------
using GenericRepoNeetu.GenericRepository.Contract;
using GenericRepoNeetu.Models;
using Microsoft.EntityFrameworkCore;

namespace GenericRepoNeetu.GenericRepository.Services
{
    public class GenericService<T> : IGeneric<T> where T : class
    {
        private readonly GenericDbContext _dbContext;
        private readonly DbSet<T> _entity;
        public GenericService(GenericDbContext dbContext, DbSet<T> entity)
        {
            _dbContext = dbContext;
            _entity = _dbContext.Set<T>();
        }
        public List<T> GetAll()
        {
            return _entity.ToList();
        }
        public bool Add(T obj)
        {
            _entity.Add(obj);
            int n = _dbContext.SaveChanges();
            if (n != 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public T Get(int id)
        {
            T t=_entity.Find(id);
            if(t!=null)
            {
                return t;
            }
            return null;
        }
        public bool Update(T obj)
        {
            _entity.Update(obj);
            int n = _dbContext.SaveChanges();
            if (n != 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool Delete(int id)
        {
            var T = _entity.Find(id);
            _entity.Remove(T);
            int n = _dbContext.SaveChanges();
            if (n != 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
---------------------