State Management in Core:-
--------------------------------------------------------
>> In every web application we follow client-server architecture.
>> web application can be accessed by Http Protocol.
https://www.amazon.in/
>> Http protocol is stateless protocol.
>> stateless proctocol doesn't maintain the information between client and server.
>> To maintain information between client and server we use the concept of State Management Technique.
There are two types of state Mangement Technique -
1. Client Side State Management.
	a) Cookies.
	b) ViewBag.
	c) ViewData.
	d) TempData.
2. Server Side State Management.
	a) Session.
------------------------------------------------------------------------------------------------------------------
1. Client Side State Management.
	a) Cookies.
>> Cookies is used to store small amount of information at client side.
>> It store only string data.(Upto 4K)(Depend Browser to Browser).
>> The default time of cookies is 30 Min.
--------------------------------------------------------------------------------------------------------------
Types of Cookie:-
	a) Non-Persistent.
>> It store cookie information at client machine on a temporarily basis.
>> As soon as when you close your Browser or turn off your computer your cookie information automatically gets deleted from the Web Browser. 
	b) Persistent.
>> It store cookie information at client machine on a Permanent basis.
>> As soon as when you close your Browser or turn off your computer your cookie information doesn't deleted from the Web Browser. 
>> you have to set the time.
----------------------------------------------------------------------------------------------------------------------------------------------------------
In cookie you need to learn these two following things :-
a) How to Write Cookie.
b) How to Read Cookie.
-------------------------------------------------------------------
	b) ViewBag.
>> ViewBag is used to transfer small piece of data from controller to view.
>> ViewBag is dynamic property.
>> ViewBag doesn't require type casting for complex data type.
>> ViewBag doesn't show  compile time error it always show runtime Error.
>> The life cycle of viewbag is current http request only.
>> The syntax of view bag is
ViewBag.varname/keyname=value
------------------------------------------------------------------------- 
 @*<h1>ViewBag = @ViewBag.test </h1>*@


<h2>My Sports are:</h2>

@{
    <ul>
    @foreach (var sport in @ViewBag.spt)
    {
        <li>@sport</li>
    }
    </ul>
}
@*
<h1>Show Employee Information </h1>

@{
    var emp = ViewBag.employee;
}
<h2>ID=@emp.EID</h2>
<h2>NAME=@emp.Name</h2>
<h2>AGE=@emp.Age</h2>
<h2>CITY=@emp.City</h2>
<h2>SALARY=@emp.Salary</h2>*@
-------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using BatchMithilesh11AMWE.Models;

namespace BatchMithilesh11AMWE.Controllers
{
    public class StateMgtController : Controller
    {
        public IActionResult Index()
        {
            //ViewBag.test = "Hello ViewBag!!!"; // contoller to view
            string[] sports = { "Cricket", "FootBall", "Batminton", "Hockey", "Tennis", "BasketBall" };
            ViewBag.spt = sports;
            Employee emp = new Employee();
            //emp.EID = 101;
            //emp.Name = "Rahul";
            //emp.Age = 19;
            //emp.City = "Noida";
            //emp.Salary = 4567.89;
            //ViewBag.employee = emp;
            return View();
        }
        public IActionResult WriteCookie()
        {
            return View();
        }

        [HttpPost]
        public IActionResult WriteCookie(Employee emp)
        {
            CookieOptions cookie = new CookieOptions();
            cookie.Expires = DateTime.Now.AddDays(2);  // Persistent Cookie
            Response.Cookies.Append("abc",emp.Name,cookie); // Write your data in Cookie.
            ViewBag.name = "Cookie Saved!";
            return View();
        }
        public IActionResult ReadCookie()
        {
            return View();
        }
        [HttpPost]
        public IActionResult ReadCookie(Employee emp)
        {
            string username = Request.Cookies["abc"].ToString();
            if(username!=null)
            {
                ViewBag.usrname = username;
            }
            return View();
        }
    }
}
-------------
c) ViewData.
>> ViewData is used to transfer small piece of data from controller to view.
>> ViewData inherits from ViewDataDictionary.
>> ViewData require type casting for complex data type.
>> ViewData doesn't show  compile time error it always show runtime Error.
>> The life cycle of viewData is current http request only.
>> The syntax of viewData is
ViewData["key/varname"]=value
-------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using BatchMithilesh11AMWE.Models;

namespace BatchMithilesh11AMWE.Controllers
{
    public class StateMgtController : Controller
    {
        public IActionResult Index()
        {
            //ViewData["test"] = "Hello ViewData!!!"; // contoller to view
            //string[] sports = { "Cricket", "FootBall", "Batminton", "Hockey", "Tennis", "BasketBall" };
            //ViewData["spt"] = sports;
            Employee emp = new Employee();
            emp.EID = 101;
            emp.Name = "Rahul";
            emp.Age = 19;
            emp.City = "Noida";
            emp.Salary = 4567.89;
            ViewData["employee"] = emp;
            return View();
        }
        public IActionResult WriteCookie()
        {
            return View();
        }

        [HttpPost]
        public IActionResult WriteCookie(Employee emp)
        {
            CookieOptions cookie = new CookieOptions();
            cookie.Expires = DateTime.Now.AddDays(2);  // Persistent Cookie
            Response.Cookies.Append("abc",emp.Name,cookie); // Write your data in Cookie.
            ViewBag.name = "Cookie Saved!";
            return View();
        }
        public IActionResult ReadCookie()
        {
            return View();
        }
        [HttpPost]
        public IActionResult ReadCookie(Employee emp)
        {
            string username = Request.Cookies["abc"].ToString();
            if(username!=null)
            {
                ViewBag.usrname = username;
            }
            return View();
        }
    }
}
-----------------------------------------------------------------------
@*<h1>ViewData = @ViewData["test"] </h1>
*@

<h2>My Sports are:</h2>

@*@{
    <ul>
        @foreach (var sport in (string[])ViewData["spt"])
        {
            <li>@sport</li>
        }
    </ul>
}*@

<h1>Show Employee Information </h1>

@{
    var emp = (Employee)ViewData["employee"];
}
<h2>ID=@emp.EID</h2>
<h2>NAME=@emp.Name</h2>
<h2>AGE=@emp.Age</h2>
<h2>CITY=@emp.City</h2>
<h2>SALARY=@emp.Salary</h2>
--------------------------------------------------------
	d) TempData. --> Pending.





