The Singleton Design Pattern is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance. This is particularly useful when you need to control access to a shared resource, such as a database connection or a configuration object, 
throughout an entire application.
There are various ways to implement a singleton pattern in C#. The following are the common characteristics of a singleton pattern.
1) Private and parameterless single constructor
2) Sealed class.
3) Static variable to hold a reference to the single created instance
4) A public and static way of getting the reference to the created instance.
---------------------------------------------------------------------------------
Key Characteristics:-
Single Instance: The pattern ensures that only one instance of the class is created.
Global Access: The instance can be accessed globally in the application.
Lazy Initialization: The instance is created only when it is first needed (optional, but often used).
Advantages of Singleton Pattern:-
Global Access: Provides a global point of access to the instance.
Controlled Instantiation: Ensures only one instance of the class exists, helping to save resources and avoid conflicts.
Lazy Loading: The instance is created only when it is first needed, which is memory efficient.
Disadvantages:
Global State: Because the instance is globally accessible, it can be difficult to manage and test in some cases.
Testing Difficulty: Singleton can make unit testing more challenging because the instance is shared across tests.
Concurrency Issues: If not implemented correctly, the pattern can cause concurrency issues in multi-threaded environments.
In summary, the Singleton pattern is useful for managing shared resources, ensuring that only one instance of a class is created and accessed throughout an application. However, 
it should be used judiciously to avoid potential downsides like difficulty in testing and managing global state.
Singleton vs Other Service Lifetimes in .NET Core:
a) Singleton: A single instance is created and used throughout the application's lifetime. The Singleton Design Pattern ensures 
only one instance of a class exists throughout the application.
b) Scoped: A new instance is created for each HTTP request (or scope in non-web applications)
c) Transient: A new instance is created each time it is requested.
===========================================================================
 you can implement the Singleton pattern using Dependency Injection (AddSingleton), which makes managing the lifecycle of singletons easier.
 Singleton is particularly useful for managing resources like configuration settings, logging, 
 and database connections that need to be shared across the application without creating multiple instances.
 ==============================================================================================================
 Note:- it is very clear that when we create a instance of any class many time the memory is allocated for each instance but in case of Singleton design pattern a single 
 instance give the service for all calls.
Real Time Example:-
---------------------
1) Take a scenario, say for a Company application, there is only one CEO. If you want to create or access CEO object, you should return the same CEO object every time.
2) One more, after logging into an application, current user must return same object every time.
-------------------------------------------------------------------------------------------------------
Real time usages/benefits of Singleton Design Pattern:-
1) While using multi-threading, to manage the multi-thread Pool.
2) to manage the "service host repositories" in SOA (service oriented architecture).
3) for Logging Framework implementation
4) in automation Testing/Unit Testing project i.e. Coded UI projects.
5) While implementing the Caching in a big application.
6) for configuration settings to make proper control over the application.
-----------------------------------------------------------------------------------
Singleton class vs. Static methods:-
------------------------------------------
The following compares Singleton class vs. Static methods,
A Static Class cannot be extended whereas a singleton class can be extended.
A Static Class cannot be initialized whereas a singleton class can be.
A Static class is loaded automatically by the CLR when the program containing the class is loaded.
----------------------------------------------------------------------------------------------











