using Microsoft.AspNetCore.Mvc;
using CodeFirstSushil.Models;
using System.Collections.Immutable;
using Microsoft.EntityFrameworkCore;
using System.Runtime.Serialization.Formatters;

namespace CodeFirstSushil.Controllers
{
    public class EmployeeController : Controller
    {
        private readonly EmployeeDbContext _emp;
        public EmployeeController(EmployeeDbContext emp)
        {
            _emp = emp;
        }
        public async Task<IActionResult> Index()
        {
            var employees =await _emp.Employees.ToListAsync();
            return View(employees);
        }
        public IActionResult Create() => View();

        [HttpPost]
        public async Task<IActionResult> Create(Employee empObj)
        {
            if (ModelState.IsValid)
            {
                _emp.Add(empObj);
                int n = await _emp.SaveChangesAsync();
                if (n != 0)
                {
                    TempData["insert"] = "<script>alert('Employee added SuccessFully!!');</script>";
                    return RedirectToAction("Index");
                }
                else
                {
                    TempData["insert"] = "<script>alert('Employee Failed!!');</script>";
                }
            }
            return View();
        }
        public async Task<IActionResult> Edit(int id)
        {
            var employee = await _emp.Employees.Where(m => m.Eid == id).FirstOrDefaultAsync();
            if(employee!=null)
            {
                return View(employee);
            }
            return View();
        }
        [HttpPost]
        public async Task<IActionResult> Edit(Employee empObj)
        {
            if (ModelState.IsValid)
            {
                _emp.Entry(empObj).State = EntityState.Modified;
                int n = await _emp.SaveChangesAsync();
                if (n != 0)
                {
                    TempData["update"] = "<script>alert('Employee Updated SuccessFully!!');</script>";
                    return RedirectToAction("Index");
                }
                else
                {
                    TempData["update"] = "<script>alert('Employee Failed!!');</script>";
                }
            }
            return View();
        }
        public async Task<IActionResult> Details(int id)
        {
            var employee = await _emp.Employees.Where(m => m.Eid == id).FirstOrDefaultAsync();
            if (employee != null)
            {
                return View(employee);
            }
            return View();
        }
        public async Task<IActionResult> Delete(int id)
        {
            var employee =await _emp.Employees.Where(m => m.Eid == id).FirstOrDefaultAsync();
            if(employee!=null)
            {
                _emp.Employees.Remove(employee);
                int n = await _emp.SaveChangesAsync();
                if (n != 0)
                {
                    TempData["delete"] = "<script>alert('Employee Deleted SuccessFully!!');</script>";
                    return RedirectToAction("Index");
                }
                else
                {
                    TempData["delete"] = "<script>alert('Employee Failed!!');</script>";
                }
            }
            return View();
        }
    }
}
---------------------------------------------------------------------------------------------------
Hard Delete -> Permanetly record remove from the database.
Soft Delete -> Doesn't delete record from Database.
----------------------------------------------------------------------------------------------------------------------
 public async Task<IActionResult> Index()
        {
            var employees = await(from m in _emp.Employees.Where(m => m.is_Del == false) select m).ToListAsync();   
            return View(employees);
        }
----------------------------------------------------------------------------------------------------------------------------------
public async Task<IActionResult> Delete(int id)
        {
            var employee =await _emp.Employees.Where(m => m.Eid == id).FirstOrDefaultAsync();
            if(employee!=null)
            {
                employee.is_Del = true; // Soft Delete
                _emp.Entry(employee).State = EntityState.Modified;
                //_emp.Employees.Remove(employee); // Hard Delete
                int n = await _emp.SaveChangesAsync();
                if (n != 0)
                {
                    TempData["delete"] = "<script>alert('Employee Deleted SuccessFully!!');</script>";
                    return RedirectToAction("Index");
                }
                else
                {
                    TempData["delete"] = "<script>alert('Employee Failed!!');</script>";
                }
            }
            return View();
        }
-----------------------------------------------------------------------------------------------------------------------------









